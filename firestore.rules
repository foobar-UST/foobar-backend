rules_version = '2';

// Wildcards
// {docId}: match document in the current collection
// {anyDoc=**}: match any document in the collection (including subcollection)

// Some conditions of request.auth:
// signed in: request.auth != null;
// specific email domain: request.auth.token.email.match('.*google[.]com$');
// email is verified: request.auth.token.email_verified;

// Some conditions of request.resource:
// field is a number: request.resource.data.rating is number;
// field in range: request.resource.data.rating <= 5;
// field has character count: request.resource.data.headline.size() > 2;
// document creator is a user: request.resource.data.reviewerId == request.auth.uid;

// Some conditions of resource:
// only update existing field: request.resource.data.score == resource.data.score;
// only read in certain state: resource.data.state == "published";

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Make sure only the user himself can request his profile.
    	allow read, write: if request.auth.uid == userId;
      
      // Make sure only the user himself can modify 'cart_items' collection.
      match /cart_items/{cartItemId} {
      	allow read, write: if request.auth.uid == userId;
      }
    }
    
    // 'users_delivery'
    // Read: deliverer
    // Write: no one
    match /users_delivery/{userId} {
    	allow read: if isUserDeliverer(userId);
      allow write: if false;
    }

    // 'users_public'
    // Read: valid users
    // Write: no one
    match /users_public/{userId} {
    	allow read: if request.auth.uid != null;
      allow write: if false;
    }
    
    // 'user_carts'
    // Read: cart owner
    // Write: no one
    match /user_carts/{userId} {
    	allow read: if request.auth.uid == userId;
      allow write: if false;
    }

    // 'advertises_basic'
    // Read: everyone
    // Write: no one
    match /advertises_basic/{advertiseId} {
    	allow read: if true;
      allow write: if false;
    }
    
    // 'sellers'
    // Read: everyone
    // Write: seller
    match /sellers/{sellerId} {
      allow read: if true;
      allow write: if isRestOwner(request.auth.uid, sellerId);
      
      // 'sellers/catalogs'
    	// Read: everyone
      // Write: seller
    	match /catalogs/{catalogId} {
     		allow read: if true;
      	allow write: if isRestOwner(request.auth.uid, sellerId);
    	}
      
      // 'sellers/items'
      // Read: everyone
      // Write: seller
      // Write: seller
    	match /items/{itemId} {
    		allow read: if true;
      	allow write: if isRestOwner(request.auth.uid, sellerId);
    	}

      // 'sellers/items_basic'
      // Read: everyone
    	// Write: no one
    	match /items_basic/{itemId} {
    		allow read: if true;
      	allow write: if false;
    	}
      
      // 'sellers/sections'
      // Read: everyone
      // Write: seller
      match /sections/{sectionId} {
      	allow read: if true;
        //TODO: allow write: if isRestOwner(request.auth.uid, sellerId);
        allow write: if true;
      }

      // 'sellers/advertises'
      // Read: everyone
      // Write: seller
      match /advertises/{advertiseId} {
        allow read: if true;
        allow write: if isRestOwner(request.auth.uid, sellerId);
      }

      // 'sellers/ratings'
      // Read: seller
      // Write: no one
      match /ratings/{ratingId} {
        allow read: if isUserSeller(request.auth.uid);
        allow write: if false;
      }

      // 'sellers/ratings_basic'
      // Read: public
      // Write: no one
      match /ratings_basic/{ratingId} {
        allow read: if true;
        allow write: if false;
      }
    }

    // Collection group: 'sellers/items'
    // Read: public
    // Write: seller
    match /{path=**}/items/{itemId} {
      allow read: if true;
      allow write: if isRestOwner(request.auth.uid, sellerId);
    }

    // Collection group: 'sellers/sections'
    // Read: public
    // Write: seller
    match /{path=**}/sections/{sectionId} {
      allow read: if true;
      // TODO: allow write: if isRestOwner(request.auth.uid, sellerId);
      allow write: if true;
    }

    // Collection group: 'sellers/sections_basic'
    // Read: public
    // Write: no one
    match /{path=**}/sections_basic/{sectionId} {
      allow read: if true;
      allow write: if false;
    }

    // Collection group: 'sellers/ratings'
    // Read: seller
    // Write: no one
    match /{path=**}/ratings/{ratingId} {
      allow read: if isUserSeller(request.auth.uid);
      allow write: if false;
    }

    // 'sellers_basic'
    // Read: public
    // Write: no one
    match /sellers_basic/{sellerId} {
    	allow read: if true;
      allow write: if false;
    }

    // 'payment_methods'
    // Read: valid user
    // Write: no one
    match /payment_methods/{paymentMethodId} {
    	allow read: if request.auth.uid != null;
      allow write: if false;
    }

    // 'orders'
    // Read: order owner
    // Write: no one
    match /orders/{orderId} {
      allow read: if request.auth.uid != null;
      allow write: if false;
    }

    // 'orders_basic'
    // Read: order owner
    // Write: no one
    match /orders_basic/{orderId} {
      allow read: if request.auth.uid != null;
      allow write: if false;
    }

    // 'item_categories'
    // Read: public
    // Write: no one
    match /item_categories/{categoryId} {
      allow read: if true;
      allow write: if false;
    }

    function isRestOwner(userId, sellerId) {
      return userId == get(/databases/$(database)/documents/sellers/$(sellerId)).data.by_user_id;
    }

    function isUserSeller(userId) {
      let userDetail = get(/databases/$(database)/documents/users/$(userId)).data;
      return 'seller' in userDetail.roles;
    }

    function isUserDeliverer(userId) {
      let userDetail = get(/databases/$(database)/documents/users/$(userId)).data;
      let hasRole = 'deliverer' in userDetail.roles;
      let hasBeenEmployed = userDetail.employed != null;

      return hasRole && hasBeenEmployed;
    }
  }
}